@model DocumentRepositoryOnline.Models.Search

@{
    ViewBag.Title = "SearchGroup";
    Layout = "~/Views/Shared/_LayoutLoggedIn.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2 class="centeredText">Search</h2>
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Content, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Content, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PagesMin, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.PagesMin, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.PagesMin, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PagesMax, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.PagesMax, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.PagesMax, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastModifiedMin, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastModifiedMin, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.LastModifiedMin, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastModifiedMax, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastModifiedMax, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.LastModifiedMax, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreationDateMin, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreationDateMin, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.CreationDateMin, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreationDateMax, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreationDateMax, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.CreationDateMax, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileSizeMin, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileSizeMin, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.FileSizeMin, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileSizeMax, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileSizeMax, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.FileSizeMax, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Extension, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Extension, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Extension, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" class="btn btn-default myButton"/>
            </div>
        </div>
    </div>
}


<div class="bs-docs-section">
    <div class="row">
        <div class="col-lg-12">
            <div class="page-header">
                <h2 class="boldText">Search results</h2>
            </div>

            <div class="bs-component">
                <table class="table table-striped table-hover ">
                    <thead>
                    <tr>
                        <th>Last modified</th>
                        <th>Date created</th>
                        <th>FileSize</th>
                        <th>Extension</th>
                        <th>Author</th>
                        <th>Title</th>
                        <th>Pages</th>
                        <th>Relevant content</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (Model != null)
                    {
                        foreach (DocumentRepositoryOnline.DocumentRepository.Record record in Model.RecordList)
                        {
                            if (record.IsCorrectPath)
                            {
                                <tr>
                                    <td>@record.LastModified</td>
                                    <td>@record.DateCreated</td>
                                    <td>@record.FileSize</td>
                                    <td>@record.Extension</td>
                                    <td>@record.Author</td>
                                    <td>@record.Title</td>
                                    <td>@record.Pages</td>
                                    <td>@record.RelevantContent</td>
                                    <td>
                                        @using (Html.BeginForm("Download", "Storage", new {path = @record.LocalPath + "\\" + record.Title}))
                                        {
                                            <button class="btn btn-primary" title="Download" type="submit">Download</button>
                                        }
                                    </td>
                                    <td>
                                        @using (Html.BeginForm("OpenFolder", "Storage", new {folderPath = @record.LocalPath}))
                                        {
                                            <button class="btn btn-success" title="Open" type="submit">Open</button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    }
                    </tbody>
                </table>
                <div id="source-button" class="btn btn-primary btn-xs" style="display: none;">&lt; &gt;</div>
            </div><!-- /example -->
        </div>
    </div>
</div>


<style>
    .centeredText {
        text-align: center;
        font-weight: bold;
    }

    .boldText { font-weight: bold; }

    .myButton {
        position: relative;
        margin: auto;
        box-sizing: border-box;
        width: 19%;
        font-size: 20px;
    }
</style>